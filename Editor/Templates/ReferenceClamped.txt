using System;
using Fasteraune.SO.Instances.Variables;
namespace #NAMESPACE#.Variables
{
    [Serializable]
    public class #NAME#VariableReferenceClamped : IDisposable
    {
        public #NAME#VariableReference Target = new #NAME#VariableReference();
        public #NAME#VariableReference Min = new #NAME#VariableReference();
        public #NAME#VariableReference Max = new #NAME#VariableReference();

        public #TYPE# Value
        {
            get
            {
                #TYPE# value = Target.Value;
                #TYPE# maxValue = Max.Value;
                        
                if (value.CompareTo(maxValue) > 0)
                {
                    Target.Value = maxValue;
                    return maxValue;
                }
                
                #TYPE# minValue = Min.Value;
                     
                if (value.CompareTo(minValue) < 0)
                {
                    Target.Value = minValue;
                    return minValue;
                }

                return value;
            }
            set
            {
                #TYPE# current = Target.Value;
                #TYPE# maxValue = Max.Value;
                
                if (current.CompareTo(maxValue) != 0 && value.CompareTo(maxValue) > 0)
                {
                    Target.Value = maxValue;
                    return;
                }
                
                #TYPE# minValue = Min.Value;
                     
                if (current.CompareTo(maxValue) != 0 && value.CompareTo(minValue) < 0)
                {
                    Target.Value = minValue;
                    return;
                }

                if (value.CompareTo(minValue) > 0 && value.CompareTo(maxValue) < 0)
                {
                    Target.Value = value; 
                }
            }
        }

        private void OnMinValueChanged(#TYPE# minValue)
        {
            if (minValue.CompareTo(Target.Value) < 0)
            {
                Target.Value = minValue;
            }
        }
        
        private void OnMaxValueChanged(#TYPE# maxValue)
        {
            if (maxValue.CompareTo(Target.Value) > 0)
            {
                Target.Value = maxValue;
            }
        }

        public void AddListener(Action<#TYPE#> listener)
        {
            Min.AddListener(OnMinValueChanged);
            Max.AddListener(OnMaxValueChanged);
            Target.AddListener(listener);
        }
        
        public void RemoveListener(Action<#TYPE#> listener)
        {
            Min.RemoveListener(OnMinValueChanged);
            Max.RemoveListener(OnMaxValueChanged);
            Target.RemoveListener(listener);
        }

        public void EnableCaching()
        {
            Min.EnableCaching();
            Max.EnableCaching();
            Target.EnableCaching();
        }

        public void Dispose()
        {
            Min.Dispose();
            Max.Dispose();
            Target.Dispose();
        }
    }
}